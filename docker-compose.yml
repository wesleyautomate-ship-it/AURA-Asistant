services:
  # PostgreSQL Database (Different port and database name)
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: real_estate_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"  # Standard PostgreSQL port
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_database.py:/docker-entrypoint-initdb.d/init_database.py:ro
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d real_estate_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Different port)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"  # Standard Redis port
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ChromaDB for document embeddings (Different port)
  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8002:8000"  # ChromaDB port
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # FastAPI Backend
  backend:
    build: ./backend
    ports:
      - "8003:8001"  # Standard backend port
    env_file:
      - ./docker.env
    environment:
      - DATABASE_URL=postgresql://admin:password123@postgres:5432/real_estate_db
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0
      - GOOGLE_API_KEY=AIzaSyAocEBBwmq_eZ1Dy5RT9S7Kkfyw8nNibmM
      - SECRET_KEY=your-secret-key-change-in-production-make-it-long-and-random-123456789
      - JWT_ALGORITHM=HS256
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - BCRYPT_ROUNDS=12
      - HOST=0.0.0.0
      - PORT=8001
      - DEBUG=true
      - AI_MODEL=gemini-1.5-flash
      - CACHE_TTL=3600
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - BATCH_SIZE=50
      - RATE_LIMIT_REQUESTS_PER_MINUTE=60
      - RATE_LIMIT_LOGIN_ATTEMPTS=5
      - MAX_FILE_SIZE=10485760
      - ENABLE_BLUEPRINT_2=true
      - NURTURING_SCHEDULER_ENABLED=true
      - DOCUMENT_GENERATION_ENABLED=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
    volumes:
       - ./backend:/app
       - backend_logs:/app/logs
       - backend_uploads:/app/uploads
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"  # Standard frontend port
    environment:
      - REACT_APP_API_URL=http://localhost:8003
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - rag-network
    restart: unless-stopped

  # Test Runner Service (for Blueprint 2.0 testing)
  test-runner:
    build: ./backend
    env_file:
      - ./docker.env
    environment:
      - DATABASE_URL=postgresql://admin:password123@postgres:5432/real_estate_db
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GOOGLE_API_KEY=AIzaSyAocEBBwmq_eZ1Dy5RT9S7Kkfyw8nNibmM
      # Reelly API removed
      - SECRET_KEY=332534d98fbf5ea7b5251e8078506a45
      - ENABLE_BLUEPRINT_2=true
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - rag-network
    command: ["python", "test_blueprint_2.py"]
    profiles:
      - test

volumes:
  postgres_data:
  chroma_data:
  backend_logs:
  backend_uploads:

networks:
  rag-network:
    driver: bridge
