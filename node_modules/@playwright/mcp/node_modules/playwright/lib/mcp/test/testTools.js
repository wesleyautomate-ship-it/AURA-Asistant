"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var testTools_exports = {};
__export(testTools_exports, {
  debugTest: () => debugTest,
  listTests: () => listTests,
  runTests: () => runTests,
  setupPage: () => setupPage
});
module.exports = __toCommonJS(testTools_exports);
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_utils = require("playwright-core/lib/utils");
var import_bundle = require("../sdk/bundle");
var import_base = require("../../reporters/base");
var import_list = __toESM(require("../../reporters/list"));
var import_listModeReporter = __toESM(require("../../reporters/listModeReporter"));
var import_projectUtils = require("../../runner/projectUtils");
var import_testTool = require("./testTool");
var import_streams = require("./streams");
const listTests = (0, import_testTool.defineTestTool)({
  schema: {
    name: "test_list",
    title: "List tests",
    description: "List tests",
    inputSchema: import_bundle.z.object({}),
    type: "readOnly"
  },
  handle: async (context) => {
    const { screen, stream } = createScreen();
    const reporter = new import_listModeReporter.default({ screen, includeTestId: true });
    const testRunner = await context.createTestRunner();
    await testRunner.listTests(reporter, {});
    return {
      content: [{ type: "text", text: stream.content() }]
    };
  }
});
const runTests = (0, import_testTool.defineTestTool)({
  schema: {
    name: "test_run",
    title: "Run tests",
    description: "Run tests",
    inputSchema: import_bundle.z.object({
      locations: import_bundle.z.array(import_bundle.z.string()).optional().describe('Folder, file or location to run: "test/e2e" or "test/e2e/file.spec.ts" or "test/e2e/file.spec.ts:20"'),
      projects: import_bundle.z.array(import_bundle.z.string()).optional().describe('Projects to run, projects from playwright.config.ts, by default runs all projects. Running with "chromium" is a good start')
    }),
    type: "readOnly"
  },
  handle: async (context, params) => {
    const { screen, stream } = createScreen();
    const configDir = context.configLocation.configDir;
    const reporter = new import_list.default({ configDir, screen, includeTestId: true });
    const testRunner = await context.createTestRunner();
    const result = await testRunner.runTests(reporter, {
      locations: params.locations,
      projects: params.projects,
      disableConfigReporters: true
    });
    const text = stream.content();
    return {
      content: [
        { type: "text", text }
      ],
      isError: result.status !== "passed"
    };
  }
});
const debugTest = (0, import_testTool.defineTestTool)({
  schema: {
    name: "test_debug",
    title: "Debug single test",
    description: "Debug single test",
    inputSchema: import_bundle.z.object({
      test: import_bundle.z.object({
        id: import_bundle.z.string().describe("Test ID to debug."),
        title: import_bundle.z.string().describe("Human readable test title for granting permission to debug the test.")
      })
    }),
    type: "readOnly"
  },
  handle: async (context, params) => {
    const { screen, stream } = createScreen();
    const configDir = context.configLocation.configDir;
    const reporter = new import_list.default({ configDir, screen });
    const testRunner = await context.createTestRunner();
    const result = await testRunner.runTests(reporter, {
      headed: !context.options?.headless,
      testIds: [params.test.id],
      // For automatic recovery
      timeout: 0,
      workers: 1,
      pauseOnError: true,
      disableConfigReporters: true
    });
    const text = stream.content();
    return {
      content: [
        { type: "text", text }
      ],
      isError: result.status !== "passed"
    };
  }
});
const setupPage = (0, import_testTool.defineTestTool)({
  schema: {
    name: "test_setup_page",
    title: "Setup page",
    description: "Setup the page for test",
    inputSchema: import_bundle.z.object({
      project: import_bundle.z.string().optional().describe('Project to use for setup. For example: "chromium", if no project is provided uses the first project in the config.'),
      testLocation: import_bundle.z.string().optional().describe('Location of the seed test to use for setup. For example: "test/seed/default.spec.ts:20".')
    }),
    type: "readOnly"
  },
  handle: async (context, params) => {
    const { screen, stream } = createScreen();
    const configDir = context.configLocation.configDir;
    const reporter = new import_list.default({ configDir, screen });
    const testRunner = await context.createTestRunner();
    let testLocation = params.testLocation;
    if (!testLocation) {
      testLocation = "default.seed.spec.ts";
      const config = await testRunner.loadConfig();
      const project = params.project ? config.projects.find((p) => p.project.name === params.project) : (0, import_projectUtils.findTopLevelProjects)(config)[0];
      const testDir = project?.project.testDir || configDir;
      const seedFile = import_path.default.join(testDir, testLocation);
      if (!import_fs.default.existsSync(seedFile)) {
        await import_fs.default.promises.mkdir(import_path.default.dirname(seedFile), { recursive: true });
        await import_fs.default.promises.writeFile(seedFile, `import { test, expect } from '@playwright/test';

test('seed', async ({ page }) => {});
`);
      }
    }
    const result = await testRunner.runTests(reporter, {
      headed: !context.options?.headless,
      locations: [testLocation],
      projects: params.project ? [params.project] : void 0,
      timeout: 0,
      workers: 1,
      pauseAtEnd: true,
      disableConfigReporters: true
    });
    const text = stream.content();
    return {
      content: [{ type: "text", text }],
      isError: result.status !== "passed"
    };
  }
});
function createScreen() {
  const stream = new import_streams.StringWriteStream();
  const screen = {
    ...import_base.terminalScreen,
    isTTY: false,
    colors: import_utils.noColors,
    stdout: stream,
    stderr: stream
  };
  return { screen, stream };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  debugTest,
  listTests,
  runTests,
  setupPage
});
